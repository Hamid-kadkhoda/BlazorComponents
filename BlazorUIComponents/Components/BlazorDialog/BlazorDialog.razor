@if (Visibility)
{
    <div class="blazor-dialog">
        <div style="@Style @MaximizeStyle"
             class="@DialogClass @StyleClass blazor-dialog-card">
            @if (ShowHeader)
            {
                <div class="blazor-dialog-header">
                    <h3>@Header</h3>
                    <div>
                        @if (Maximizable)
                        {
                            if (IsMaximize)
                            {
                                <button @onclick="MinimizeDialog">
                                    <Window_minimize></Window_minimize>
                                </button>
                            }
                            else
                            {
                                <button @onclick="MaximizeDialog">
                                    <Window_maximize></Window_maximize>
                                </button>
                            }
                        }
                        <button @onclick="CloseDialog">
                            <Times></Times>
                        </button>
                    </div>
                </div>
            }
            <div class="blazor-dialog-body">
                @ChildContent
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string? Style { get; set; }

    [Parameter] public string? StyleClass { get; set; }

    [Parameter] public bool Maximizable { get; set; } = true;

    [Parameter] public bool IsMaximize { get; set; } = false;

    [Parameter] public string? Header { get; set; }

    [Parameter] public RenderFragment? ChildContent { get; set; }

    private bool _Visibility { get; set; } = false;

    [Parameter]
    public bool Visibility
    {
        get => _Visibility;
        set
        {
            if (_Visibility != value)
            {
                if (value)
                {
                    DialogClass = "dialog-open";
                }
                else
                {
                    DialogClass = "dialog-close";
                    InvokeAsync(async () =>
                    {
                        await Task.Delay(300);
                        _Visibility = false;
                        await VisibilityChanged.InvokeAsync(_Visibility);
                        StateHasChanged();
                    });
                    return;
                }
                _Visibility = value;
                VisibilityChanged.InvokeAsync(_Visibility);
                StateHasChanged();
            }
        }
    }

    [Parameter] public bool ShowHeader { get; set; } = true;

    private string? MaximizeStyle { get; set; }

    private string? TransitionOption { get; set; } = "250ms ease-in-out";

    [Parameter] public EventCallback<bool> VisibilityChanged { get; set; }

    private string? DialogClass { get; set; }

    private void MaximizeDialog()
    {
        IsMaximize = true;
        MaximizeStyle = "width: 100%;height: 100vh;margin: 0;max-width: unset;";
    }

    private void MinimizeDialog()
    {
        IsMaximize = false;
        MaximizeStyle = "";
    }

    private void CloseDialog()
    {
        MaximizeStyle = "";
        Visibility = false;
        this.IsMaximize = false;
        VisibilityChanged.InvokeAsync(Visibility);
    }
}
